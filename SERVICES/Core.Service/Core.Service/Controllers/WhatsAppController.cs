using Microsoft.AspNetCore.Mvc;
using System.Text.Json;
using Core.Service.Application.Models;
using Core.Service.Application.Services;

namespace Core.Service.Controllers;

[ApiController]
[Route("api/[controller]")]
public class WhatsAppController : ControllerBase
{
    private readonly IWhatsAppService _whatsAppService;
    private readonly IConfiguration _configuration;
    private readonly ILogger<WhatsAppController> _logger;

    public WhatsAppController(
        IWhatsAppService whatsAppService,
        IConfiguration configuration,
        ILogger<WhatsAppController> logger)
    {
        _whatsAppService = whatsAppService;
        _configuration = configuration;
        _logger = logger;
    }

    [HttpGet("webhook")]
    public IActionResult VerifyWebhook([FromQuery(Name = "hub.mode")] string mode,
                                      [FromQuery(Name = "hub.challenge")] string challenge,
                                      [FromQuery(Name = "hub.verify_token")] string verifyToken)
    {
        try
        {
            var expectedToken = _configuration["WhatsApp:VerifyToken"];
            
            if (mode == "subscribe" && verifyToken == expectedToken)
            {
                _logger.LogInformation("Webhook verificado com sucesso");
                return Ok(challenge);
            }
            
            _logger.LogWarning("Falha na verifica√ß√£o do webhook. Mode: {Mode}, Token v√°lido: {TokenValid}", 
                mode, verifyToken == expectedToken);
            return Forbid();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro na verifica√ß√£o do webhook");
            return StatusCode(500);
        }
    }

    [HttpPost("webhook")]
    public async Task<IActionResult> ReceiveWebhook([FromBody] WhatsAppWebhookRequest request)
    {
        try
        {
            _logger.LogInformation("Webhook recebido: {Request}", JsonSerializer.Serialize(request));

            if (request.Object != "whatsapp_business_account")
            {
                return BadRequest("Objeto n√£o suportado");
            }

            foreach (var entry in request.Entry)
            {
                foreach (var change in entry.Changes)
                {
                    if (change.Field == "messages")
                    {
                        await ProcessMessagesAsync(change.Value);
                    }
                }
            }

            return Ok();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao processar webhook");
            return StatusCode(500);
        }
    }

    private async Task ProcessMessagesAsync(WhatsAppValue value)
    {
        try
        {
            foreach (var message in value.Messages)
            {
                var phoneNumber = message.From;
                var messageType = message.Type;

                _logger.LogInformation("Processando mensagem do tipo {Type} de {Phone}", messageType, phoneNumber);

                switch (messageType)
                {
                    case "text":
                        await ProcessTextMessageAsync(phoneNumber, message.Text?.Body ?? string.Empty);
                        break;
                    
                    case "image":
                        if (message.Image != null)
                        {
                            await ProcessImageMessageAsync(phoneNumber, message.Image);
                        }
                        break;
                    
                    default:
                        await _whatsAppService.SendTextMessageAsync(phoneNumber, 
                            "üì± Ol√°! Envie uma foto do seu recibo que eu vou analisar para voc√™! üì∏");
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao processar mensagens");
        }
    }

    private async Task ProcessTextMessageAsync(string phoneNumber, string messageText)
    {
        try
        {
            var lowerMessage = messageText.ToLowerInvariant().Trim();

            // Comandos b√°sicos
            switch (lowerMessage)
            {
                case "oi":
                case "ol√°":
                case "ola":
                case "hello":
                case "hi":
                    await _whatsAppService.SendTextMessageAsync(phoneNumber, 
                        "üëã Ol√°! Bem-vindo ao *ZapFinance*!\n\n" +
                        "üì∏ Envie uma foto do seu recibo que eu vou extrair todas as informa√ß√µes automaticamente!\n\n" +
                        "‚ú® Posso identificar:\n" +
                        "‚Ä¢ Valor total\n" +
                        "‚Ä¢ Estabelecimento\n" +
                        "‚Ä¢ Data da compra\n" +
                        "‚Ä¢ Itens comprados\n" +
                        "‚Ä¢ N√∫mero de parcelas\n" +
                        "‚Ä¢ Categoria\n\n" +
                        "Vamos come√ßar? üöÄ");
                    break;

                case "ajuda":
                case "help":
                case "?":
                    await _whatsAppService.SendTextMessageAsync(phoneNumber,
                        "üÜò *Como usar o ZapFinance:*\n\n" +
                        "1Ô∏è‚É£ Tire uma foto clara do seu recibo\n" +
                        "2Ô∏è‚É£ Envie a foto aqui no WhatsApp\n" +
                        "3Ô∏è‚É£ Aguarde a an√°lise autom√°tica\n" +
                        "4Ô∏è‚É£ Receba todas as informa√ß√µes extra√≠das!\n\n" +
                        "üí° *Dicas para melhores resultados:*\n" +
                        "‚Ä¢ Foto bem iluminada\n" +
                        "‚Ä¢ Recibo completamente vis√≠vel\n" +
                        "‚Ä¢ Evite sombras ou reflexos\n\n" +
                        "üì± Seus recibos ficam salvos automaticamente!");
                    break;

                default:
                    await _whatsAppService.SendTextMessageAsync(phoneNumber,
                        "üì∏ Envie uma foto do seu recibo para an√°lise!\n\n" +
                        "üí¨ Digite *ajuda* se precisar de instru√ß√µes.");
                    break;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao processar mensagem de texto");
        }
    }

    private async Task ProcessImageMessageAsync(string phoneNumber, WhatsAppImageMessage image)
    {
        try
        {
            await _whatsAppService.SendTextMessageAsync(phoneNumber, 
                "üîç Analisando seu recibo... Aguarde um momento!");

            var success = await _whatsAppService.ProcessReceiptImageAsync(
                phoneNumber, 
                image.Id, 
                image.Caption);

            if (!success)
            {
                await _whatsAppService.SendTextMessageAsync(phoneNumber,
                    "‚ùå N√£o consegui processar esta imagem.\n\n" +
                    "üí° *Tente novamente com:*\n" +
                    "‚Ä¢ Foto mais clara\n" +
                    "‚Ä¢ Melhor ilumina√ß√£o\n" +
                    "‚Ä¢ Recibo completamente vis√≠vel\n\n" +
                    "üì∏ Envie outra foto quando estiver pronto!");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao processar imagem");
            await _whatsAppService.SendTextMessageAsync(phoneNumber,
                "‚ùå Erro interno ao processar a imagem. Tente novamente em alguns instantes.");
        }
    }
}
